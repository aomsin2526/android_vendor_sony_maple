###################### Start of libnfc-nci.conf #######################

###############################################################################
# Application options
APPL_TRACE_LEVEL=0x05
#PROTOCOL_TRACE_LEVEL=0x00000000
PROTOCOL_TRACE_LEVEL=0xFFFFFFFF

###############################################################################
# performance measurement
# Change this setting to control how often USERIAL log the performance (throughput)
# data on read/write/poll
# defailt is to log performance dara for every 100 read or write
#REPORT_PERFORMANCE_MEASURE=100

###############################################################################
# File used for NFA storage
NFA_STORAGE="/data/vendor/nfc"

###############################################################################
# Snooze Mode Settings
#
#  By default snooze mode is disable.
#
#  If SNOOZE_MODE_CFG is not provided, the default settings are used:
#  They are as follows:
#       0             Sleep Mode (0=Disabled 1=UART 8=SPI/I2C)
#       0             Idle Threshold Host
#       0             Idle Threshold HC
#       0             NFC Wake active mode (0=ActiveLow 1=ActiveHigh)   PON
#       1             Host Wake active mode (0=ActiveLow 1=ActiveHigh)  not assign
#
SNOOZE_MODE_CFG={08:00:00:00:01}

###############################################################################
# Insert a delay in milliseconds after NFC_WAKE and before write to NFCC
NFC_WAKE_DELAY=20

###############################################################################
# Various Delay settings (in ms) used in USERIAL
#  POWER_ON_DELAY
#    Delay after turning on chip, before writing to transport (default 300)
#  PRE_POWER_OFF_DELAY
#    Delay after deasserting NFC-Wake before turn off chip (default 0)
#  POST_POWER_OFF_DELAY
#    Delay after turning off chip, before USERIAL_close returns (default 0)
#
#POWER_ON_DELAY=300
#PRE_POWER_OFF_DELAY=0
#POST_POWER_OFF_DELAY=0

###############################################################################
# Maximum time (ms) to wait for RESET NTF after setting REG_PU to high
# The default is 1000.
NFCC_ENABLE_TIMEOUT=100

###############################################################################
# Device Manager Config
#
#  If NFA_DM_CFG is not provided, stack default settings are
#  used (see nfa_dm_cfg.c).  They are as follows:
#       0 (FALSE)     Automatic NDEF detection when background polling
#       0 (FALSE)     Automatic NDEF read when background polling
#       0 (FALSE)     Automatic NDEF presence check when background polling
#       0x3           Presence check option, Android needs value 3
#       500           Maximum time to wait for presence check response
#
#NFA_DM_CFG={00:00:00:03:01:f4}

###############################################################################
# LPTD mode configuration
#  byte[0] is the length of the remaining bytes in this value
#     if set to 0, LPTD params will NOT be sent to NFCC (i.e. disabled).
#  By default, LPTD is enabled and default settings are used.
#  See nfc_hal_dm_cfg.c for defaults
LPTD_CFG={00}

###############################################################################
# Startup Configuration (100 bytes maximum)
#  byte[0] is the length of the remaining bytes in this value
#     if set to 0, Startup Configuration params will NOT be sent to NFCC (i.e. disabled).
#  See nfc_hal_dm_cfg.c for defaults
#
#  byte[0] TLV total len = 0x3
#  byte[1] NCI_PARAM_ID_TYPEF_IGNORE_CNT_VALUE(0xD4)
#  byte[2] len
#  byte[3] counter
#  See nfc_hal_dm_cfg.c for defaults
#NFA_DM_START_UP_CFG={03:D4:01:01}
#  byte[0] TLV total len = 0x9
#  byte[1] LISTEN_EXTENTION_TIME(0xD1)
#  byte[2] len
#  byte[3] 250ms (0x19)
#  byte[4] LPP_N(0xD2)
#  byte[5] len
#  byte[6] infinite(0xFF)
#  byte[7] FSAM_SHUTDOWN_START_TIME(0xD3)
#  byte[8] len
#  byte[9] 0ms (0x00)
NFA_DM_START_UP_CFG={0C:D1:01:19:D2:01:FF:D3:01:00:A0:01:01}

###############################################################################
# Startup Vendor Specific Configuration (100 bytes maximum);
#NFA_DM_START_UP_VSC_CFG={00} #default
#  byte[0] TLV total len = 0x5
#  byte[1] NCI_MTS_CMD|NCI_GID_PROP = 0x2f
#  byte[2] NCI_MSG_NCI_PROP_SIM_SELECT = 0x12
#  byte[3] 2
#  byte[4] 0=SWIO1 ; 1=SWIO2
#  byte[5] 0=low power; 1=full power
#NFA_DM_START_UP_VSC_CFG={05:2F:12:02:00:01}
#NFA_DM_START_UP_VSC_CFG={11:2f:1b:00:2f:34:08:f8:74:00:01:00:02:00:00:2f:1b:00}
#NFA_DM_START_UP_VSC_CFG={16:2F:34:08:7C:75:00:01:03:01:00:02:2F:34:08:30:75:00:01:03:00:D0:07}
NFA_DM_START_UP_VSC_CFG={24:2f:34:08:7c:75:00:01:03:01:00:02:2f:34:08:30:75:00:01:03:00:d0:07:2f:34:08:d8:74:00:01:b8:0b:01:00:2f:1b:00}

###############################################################################
# Configure the default Destination Gate used by HCI (the default is 4, which
# is the ETSI loopback gate.
#NFA_HCI_DEFAULT_DEST_GATE=0x04

###############################################################################
# Override the stack default for NFA_EE_MAX_EE_SUPPORTED set in nfc_target.h.
# The value is set to 3 by default as it assumes we will discover 0xF2,
# 0xF3, and 0xF4. If a platform will exclude and SE, this value can be reduced
# so that the stack will not wait any longer than necessary.
NFA_MAX_EE_SUPPORTED=2

###############################################################################
# Configure the single default SE to use.  The default is to use the first
# SE that is detected by the stack.  This value might be used when the phone
# supports multiple SE (e.g. 0xF3 and 0xF4) but you want to force it to use
# one of them (e.g. 0xF4).
#ACTIVE_SE=0xF3
#ACTIVE_SE=0x01

###############################################################################
# Configure the default IsoDep protocol route. Can be
# either a secure element (e.g. 0xF4) or the host (0x00)
DEFAULT_ISODEP_ROUTE=0x00
###############################################################################
# Configure the default NfcA/B techology route. Can be
# either a secure element (e.g. 0xF4) or the host (0x00)
DEFAULT_TECH_ROUTE=0x02

DEFAULT_OFFHOST_ROUTE=0x02

###############################################################################
# Configure AID matching alogolizum
# Every routing table entry is matched exact (BCM20793)
# AID_MATCHING_EXACT_ONLY = 0x00;
# Every routing table entry can be matched either exact or prefix
# AID_MATCHING_EXACT_OR_PREFIX = 0x01;
# Every routing table entry is matched as a prefix
# AID_MATCHING_PREFIX_ONLY = 0x02;
AID_MATCHING_MODE=0

###############################################################################
# Configure the NFC Extras to open and use a static pipe.  If the value is
# not set or set to 0, then the default is use a dynamic pipe based on a
# destination gate (see NFA_HCI_DEFAULT_DEST_GATE).  Note there is a value
# for each UICC (where F3="UICC0" and F4="UICC1")
#NFA_HCI_STATIC_PIPE_ID_F3=0x70
#NFA_HCI_STATIC_PIPE_ID_F4=0x71
NFA_HCI_STATIC_PIPE_ID_01=0x70

###############################################################################
# When disconnecting from Oberthur secure element, perform a warm-reset of
# the secure element to deselect the applet.
# The default hex value of the command is 0x3.  If this variable is undefined,
# then this feature is not used.
#OBERTHUR_WARM_RESET_COMMAND=0x03

###############################################################################
# Force UICC to only listen to the following technology(s).
# The bits are defined as tNFA_TECHNOLOGY_MASK in nfa_api.h.
# Default is NFA_TECHNOLOGY_MASK_A | NFA_TECHNOLOGY_MASK_B.
# if set 0, auto select
UICC_LISTEN_TECH_MASK=0x07

###############################################################################
# AID for Empty Select command
# If specified, this AID will be substituted when an Empty SELECT command is
# detected.  The first byte is the length of the AID.  Maximum length is 16.
#AID_FOR_EMPTY_SELECT={08:A0:00:00:01:51:00:00:00}

###############################################################################
# Force tag polling for the following technology(s).
# The bits are defined as tNFA_TECHNOLOGY_MASK in nfa_api.h.
# Default is NFA_TECHNOLOGY_MASK_A | NFA_TECHNOLOGY_MASK_B |
#            NFA_TECHNOLOGY_MASK_F | NFA_TECHNOLOGY_MASK_ISO15693 |
#            NFA_TECHNOLOGY_MASK_B_PRIME | NFA_TECHNOLOGY_MASK_A_ACTIVE |
#            NFA_TECHNOLOGY_MASK_F_ACTIVE.
#
# Notable bits:
# NFA_TECHNOLOGY_MASK_A 0x01
# NFA_TECHNOLOGY_MASK_B 0x02
# NFA_TECHNOLOGY_MASK_F 0x04
# NFA_TECHNOLOGY_MASK_ISO15693 0x08
# NFA_TECHNOLOGY_MASK_B_PRIME 0x10
# NFA_TECHNOLOGY_MASK_KOVIO 0x20
# NFA_TECHNOLOGY_MASK_A_ACTIVE 0x40
# NFA_TECHNOLOGY_MASK_F_ACTIVE 0x80
POLLING_TECH_MASK=0xEF

###############################################################################
# Force P2P to only listen for the following technology(s).
# The bits are defined as tNFA_TECHNOLOGY_MASK in nfa_api.h.
# Default is NFA_TECHNOLOGY_MASK_A | NFA_TECHNOLOGY_MASK_F |
#            NFA_TECHNOLOGY_MASK_A_ACTIVE | NFA_TECHNOLOGY_MASK_F_ACTIVE
#P2P_LISTEN_TECH_MASK=0xC5
P2P_LISTEN_TECH_MASK=0x41

###############################################################################
# Maximum Number of Credits to be allowed by the NFCC
#   This value overrides what the NFCC specifices allowing the host to have
#   the control to work-around transport limitations.  If this value does
#   not exist or is set to 0, the NFCC will provide the number of credits.
#MAX_RF_DATA_CREDITS=1

###############################################################################
# This setting allows you to disable registering the T4t Virtual SE that causes
# the NFCC to send PPSE requests to the DH.
# The default setting is enabled (i.e. T4t Virtual SE is registered).
#REGISTER_VIRTUAL_SE=1

###############################################################################
# When screen is turned off, specify the desired power state of the controller.
# 0: power-off-sleep state; DEFAULT
# 1: full-power state
# 2: screen-off card-emulation (CE4/CE3/CE1 modes are used)
SCREEN_OFF_POWER_STATE=2

###############################################################################
# Firmware patch file
#  If the value is not set then patch download is disabled.
#FW_PATCH="/vendor/firmware/cxd224x_firmware.bin"

###############################################################################
# SPD Debug mode
#  If set to 1, any failure of downloading a patch will trigger a hard-stop
#SPD_DEBUG=0

###############################################################################
# SPD Max Retry Count
#  The number of attempts to download a patch before giving up (defualt is 3).
#  Note, this resets after a power-cycle.
#SPD_MAX_RETRY_COUNT=3

###############################################################################
# transport driver
#
# TRANSPORT_DRIVER=<driver>
#
#  where <driver> can be, for example:
#    "/dev/ttyS"        (UART)
#    "/dev/bcmi2cnfc"   (I2C)
#    "hwtun"            (HW Tunnel)
#    "/dev/bcmspinfc"   (SPI)
#    "/dev/btusb0"      (BT USB)
#TRANSPORT_DRIVER="/dev/ttyS"
#TRANSPORT_DRIVER="/dev/ttyUSB" # for panda USBserial
TRANSPORT_DRIVER="/dev/cxd224x-i2c"

###############################################################################
# power control driver
# Specify a kernel driver that support ioctl commands to control NFC_EN and
# NFC_WAKE gpio signals.
#
# POWER_CONTRL_DRIVER=<driver>
#  where <driver> can be, for example:
#    "/dev/nfcpower"
#    "/dev/bcmi2cnfc"   (I2C)
#    "/dev/bcmspinfc"   (SPI)
#    i2c and spi driver may be used to control NFC_EN and NFC_WAKE signal
#POWER_CONTROL_DRIVER="/dev/cxd224x-i2c"
POWER_CONTROL_DRIVER="/dev/cxd224x-wake"
###############################################################################
# UART transport driver options
#
# PORT=1,2,3,...
# BAUD=115200, 19200, 9600, 4800,
# DATABITS=8, 7, 6, 5
# PARITY="even" | "odd" | "none"
# STOPBITS="0" | "1" | "1.5" | "2"
# FC="none" | "hw"

UART_PORT=2
#UART_PORT=0 # for panda USBserial
UART_BAUD=115200
UART_DATABITS=8
UART_PARITY="none"
UART_STOPBITS="1"
UART_FC="hw"

###############################################################################
# Insert a delay in microseconds per byte after a write to NFCC.
# after writing a block of data to the NFCC, delay this an amopunt of time before
# writing next block of data.  the delay is calculated as below
#   NFC_WRITE_DELAY * (number of byte written) / 1000 milliseconds
# e.g. after 259 bytes is written, delay (259 * 20 / 1000) 5 ms before next write
NFC_WRITE_DELAY=20

###############################################################################
# Default poll duration (in ms)
#  The defualt is 500ms if not set (see nfc_target.h)
NFA_DM_DISC_DURATION_POLL=300

###############################################################################
# preserve stack NV store
PRESERVE_STORAGE=1

###############################################################################
# Configuration for the RF discovery frequency for each technology. The values mean
# frequency for NFC Technology A
# Technology B
# Technology F
# Proprietary Technology/15693
# Proprietary Technology/B-Prime
# Proprietary Technology/Kovio
# Technology A active mode
# Technology F active mode
#POLL_FREQUENCY={01:01:01:01:01:01:01:01}

###############################################################################
# Choose the presence-check algorithm for type-4 tag. If not defined,
# the default value is 1.
# 0 NFA_RW_PRES_CHK_DEFAULT; Let stack selects an algorithm
# 1 NFA_RW_PRES_CHK_I_BLOCK; ISO-DEP protocols empty I-block
# 2 NFA_RW_PRES_CHK_RESET; Deactivate to Sleep, then re-activate
# 3 NFA_RW_PRES_CHK_RB_CH0; Type-4 tag protocols ReadBinary command on channel 0
# 4 NFA_RW_PRES_CHK_RB_CH3; Type-4 tag protocols ReadBinary command on channel 3
PRESENCE_CHECK_ALGORITHM=3

###############################################################################
# Configure device host whitelist of HCI host ID's;
# see specification ETSI TS 102 622 V11.1.10(2012-10), section 6.1.3.1
DEVICE_HOST_WHITE_LIST={02}

###############################################################################
# CXD224x addtional options

###############################################################################
# CXD224X_WORKAROUND : CXD224x device specific workaround over HAL layer(libnfc-nci and jni)
#                    : mainly used for F/W bug workaround, spec differnce from brcm device
# 0x1: Workaround    replace bigend packet to little (f/w bug), shall be removed after bugfix(nfa/dm,nfa/ce)
# 0x2: Workaround    drop status byte in the Data Packet from RF to DH(ISO15693 use)(nfc/nfc)
# 0x4: Workaround    for DEFAULT_LMR(Listen Mode Routing). TypeF and NFC-DEP are added in JNI layer.(jni)
# 0x8: Workaround    report CORE_GENERIC_ERROR to upper layer(nfa/dm)
# 0x10:Workaround    ignore extra EE_DISCOVERY_REQ_NTF(nfa/hci)
# 0x20:Workaround    ignore DATA message after T2T nack received(nfa/rw)
# 0x40:Workaround    enable the restoring status if NFCEE i/f is HCI Access(nfa/ee)
# 0x80:Workaround    enable max read block limitter(nfc/tags/rw_i93)
# 0x100:Workaround   switch HAL_LP_IDLE_TIMEOUT after NFA_Enable() complate.(nfa/sys)
# 0x200:Workaround   request saved NTF packets which recved under initilization(EE_DISC_REQ_NTF)
# 0x400:Workaround   Send Deselect command during PresenceCheck when connected to NfcA/NfcB
# 0x800:Workaround   Disable(ModeSet) NFCEE(HCI interface) when recv multiple EE_INTF_ACTIVE_FAIL(nfa/hci)
# 0x1000:Workaround  DO NOT SEND EE_DISCOVER_REQ_EVT when EE mode is changed from Inactive to Active.(nfa/ee)
# 0x2000:Workaround  T3T and Frame RF Interface in RF_INTF_ACTIVATE_NTF, copy local nfcid2.(nfa/ce)
# 0x4000:Workaround  drop all zero packet, it may be casued by spurious interrupt(nfc/nfc)
# 0x8000:Workaround  Store HCI into to device NV(jni)
# 0x10000:Workaround Update device setting when interface close/shutdown(jni)
CXD224X_WORKAROUND=0xD7FF

###############################################################################
# Hal init control : initialization ctrl under HAL
# 0x1: NFC_DEVICE_RESET, assert xrst after open transport
# 0x2: NFC_NFASTORAGE_NVERASE, if not found valid nfaStorage.bin1, do NvErase and DeviceReset
# 0x4: NFC_SEND_DEVINFO, send devinfo(HW/FW/PATCH info) to upperlayer when HAL_NfcPreInitDone()
HAL_INIT_CTRL=0x3

###############################################################################
# Various Delay settings (in ms) used in USERIAL
#  DEVICE_RESET_DELAY
#    Delay after assert device reset, before open transport (default 20)
DEVICE_RESET_DELAY=20

###############################################################################
# Low Power Idle Timeout
# The timeout value of NFC_HAL_LP_IDLE_TIMEOUT is fixed value on compile time.
# This value can be changed by using HAL_LP_IDLE_TIMEOUT in this config file
# The time unit is msec
HAL_LP_IDLE_TIMEOUT=200
HAL_LP_IDLE_LONG_TIMEOUT=2000

###############################################################################
# CXD224X default RF_SET_LISTEN_MODE_ROUTING_CMD
#   byte[0] is TLV total len
#   byte[1...x] is Routing Entry [1..n]
#
# byte[0]=0x19(25)
# Routing Entry[1]=TECH_ROUTING,     NFCEE_ID=DH, Battery_off=0,Switch_off=0,Switch_on=1, TypeA
# Routing Entry[2]=TECH_ROUTING,     NFCEE_ID=DH, Battery_off=0,Switch_off=0,Switch_on=1, TypeB
# Routing Entry[3]=TECH_ROUTING,     NFCEE_ID=DH, Battery_off=0,Switch_off=0,Switch_on=1, TypeF
# Routing Entry[4]=PROTOCOL_ROUTING, NFCEE_ID=DH, Battery_off=0,Switch_off=0,Switch_on=1, ISO-DEP
# Routing Entry[5]=PROTOCOL_ROUTING, NFCEE_ID=DH, Battery_off=0,Switch_off=0,Switch_on=1, NFC-DEP
LMR_CFG={19:00:03:00:01:00:00:03:00:01:01:00:03:00:01:02:01:03:00:01:04:01:03:00:01:05}

###############################################################################
# Startup Vendor Specific Devive memory RWM Configuration (100 bytes maximum);
#  rmwdata[addr] = (rdata[addr] & ~wmask)|(wdata & wmask)
#
#  byte[0]             TLV total len = 0x18
#  byte[1][2][3][4]     addr0(le)
#  byte[5][6][7][8]     wmask0
#  byte[9][10][11][12]  wdata0
#  byte[13][14][15][16] addr1(le)
#  byte[17][18][19][20] wmask1
#  byte[21][22][23][24] wdata1
#NFA_DM_START_UP_RMW_CFG={18:4c:7f:00:01:00:00:ff:00:00:00:01:00:50:7f:00:01:ff:00:00:ff:01:00:00:01}

###############################################################################
# Closing Vendor Specific Configuration (100 bytes maximum);
#  byte[0]      TLV total len = 0x0b
#  byte[1][2]   WRITE_ADR
#  byte[3]      len = 0x8
#  byte[4]-[7]  adr = 0x01007530(SIM rfIntMaskTime)
#  byte[8]-[11] 40ms
#NFA_DM_CLOSING_VSC_CFG={0B:2F:34:08:30:75:00:01:28:00:00:00}
#  byte[0]      TLV total len = 0x0b
#  byte[1][2]   FLASH_ACCESS
#  byte[3]      len = 0x8
#  byte[4]      Erase
#  byte[5]
#  byte[6]-[7]  0x0010
#  byte[8]-[11] 0x00030000
#NFA_DM_CLOSING_VSC_CFG={0B:2f:39:08:00:00:10:00:00:00:03:00}

###############################################################################
# LIBNCI_BUGFIX: libnfc-nci bug fix switch over HAL layer
#
# 0x1: BugFix: T1T Do not use Activation Parameters, retrieve additional tag infomation via RID
# 0x2: BugFix: T2T fix NULL TLV can not cross 16byte boundary( offset calc bug )
# 0x4: BugFix: RF_SET_LISTEN_MODE_ROUTING_CMD use More flag if tlv_size > 255
LIBNCI_BUGFIX=0x7

###############################################################################
# Skip NFA_SetConfig()/NFA_GetConfig() under jni layer with Proprietary Use paramteter
# NCI_PARAM_ID_ACT_ORDER(0xC5 BRCM Active/Passive ctrl)
# NCI_PARAM_ID_SWPCFG(0xC2 BRCM uicc idle timeout)
SKIP_PROP_CONFIG_WORKAROUND=1

###############################################################################
# Configure the number of UICC I/F (the default is 2)
NFA_HCI_NUM_UICC=0x01

###############################################################################
# Configure the discovery sequence for NFCEE HCI network  (the default is 0)
# 0x0: NFCEE_MODE_SET=>CONN_CREATE (original)
# 0x1: DELAYED MODE_SET mode1 ( nfa_hci_dh_startup_complete() )
# 0x2: DELAYED MODE_SET mode1 with checking UIM gate( nfa_hci_dh_startup_complete() )
NFA_HCI_DISCOVERY_SEQ=0x2

###############################################################################
# Configure the UIM management gate polling interval time(the default is 0)
# Insert a delay in microseconds after UIM management gate read.
# This parameter is only effective under NFA_HCI_DISCOVERY_SEQ=0x2 mode
NFA_HCI_UIM_POLLING_INTERVAL=100

###############################################################################
# Configure the pre-wait time before polling UIM management gate(the default is 0)
# Insert a delay in microseconds before 1st UIM management gate read.
# This parameter is only effective under NFA_HCI_DISCOVERY_SEQ=0x2 mode
NFA_HCI_UIM_POLLING_PREWAIT=700

###############################################################################
# Configure DTA mode ( the default is 0 )
# 0x0: disable
# 0x1: enable, disable sending t3t_polling command after recv INTF_ACTIVATED etc
DTA_MODE=0x0

###############################################################################
# Configure NFA_RequestExclusiveRfControl() ( the default is 0 )
# 0x0: original
# 0x1: enable additional paramter(tNFA_LISTEN_CFG.ignore_rt_check_enable)
#      this paramter disabled comparing 'listen_RT == DH' in nfa_dm_set_rf_listen_mode_raw_config()
#      for using this as UICC listen only enabler function.
NFA_EXCLUSIVERFCONTROL_CONFIG=0x1

###############################################################################
# Configure NFA_RF_DISCOVERY
# The RF Communication State Machine defined by NCI Spec is forbidden to receive
# RF_DISCOVER_CMD in RFST_DISVOVERY state.
# This configuration is used to accept RF_DISCOVER_CMD even in RFST_DISVOVERY
# state and then enable to transit from/to Poll&Listen and ExclRfCtrl mode
# directly(skip RF_IDLE state)
# The default(comment out) is reserved orignal error check
# "nfcManager_enableDiscovery: already polling"
#
# 0x0: keep original state machine( via RFST_IDLE ), but skip error checking
# 0x1: skip RFST_IDLE state only when Poll&Listen=>ExclRfCtrl
# 0x3: accept RF_discovery request even in NFA_DM_RFST_DISCOVERY state
#      both Poll&Listen<=>ExclRfCtrl
# 0x4: skip NFC_Deactivate in case of the discovery states mismatch between NFCC and DH
# 0x7: all enable
NFA_RF_DISCOVERY_CONFIG=0x5

###############################################################################
# Configure NFA_HCI_EVT_TRANSACTION action
# 0x1: NFA_HCI_EVT_TRANSACTION_ACTION_AOSP -- AOSP action(default)
# 0x2: NFA_HCI_EVT_TRANSACTION_ACTION_SONY -- com.sony.nfc.action.TRANSACTION_DETECTED
# 0x4: NFA_HCI_EVT_TRANSACTION_ACTION_GSMA -- GSMA NFC Handset APIs Requirement Specification
HCI_EVT_TRANSACTION_ACTION=0x1

###############################################################################
# Configure Listen A Parameter for LA_BIT_FRAME_SDD(Byte 1 of SENS_RES) when TypeA is routing to DH
NFA_DM_LA_BIT_FRAME_SDD=0x01

###############################################################################
# Configure Felica
FELICA_CONFIG=0xFFFFFFFF
# EE handle
NFCEE_ID_ESE=0x402
NFCEE_ID_UICC=0x401

###############################################################################
# Configure T3T CE LISTEN registration limitter
# This value is used when NFA_CeRegisterFelicaSystemCodeOnDH is called.
# Should be set the value of LF_T3T_MAX(configuration parameter) or less
# LF_T3T_MAX is 2 on CXD224X
CE_LF_T3T_MAX_LIMIT=2

###############################################################################
# Configure panic action
# if a) NFCC stopped responding(timeout) or b) Reset itself(recv CORE_RESET_NTF),
# the following action can be selected.
#
# 0: AOSP (default), same as orignal AOSP function
# 1: kill() process
# 2: abort() process
# 3: a) abort(), b) Send event(NFA_DM_CORE_RESET_NTF_REVT)
# 4: a) device reset then kill() process when recv CORE_RESET_NTF, b) kill()
# 5: a) device reset then Send event, b) Send event(NFA_DM_CORE_RESET_NTF_REVT)
# 6: a) Send event(NFA_DM_CORE_GEN_ERROR_REVT(HW_TIMEOUT)),
#    b) Send event(NFA_DM_CORE_RESET_NTF_REVT) for debug use only
SELECT_PANIC_ACTION=1

###############################################################################
# Added by SOMC
SKIP_RF_CONTROL=1

###############################################################################
# Masking value of technologies_switch_off for NFA_EeSetDefaultTechRouting()
# this value is used as masking value of technologies_switch_off, and it is not for DH ee_handle
# If the value is not set, masking value is 0xff
MASKING_TECH_EE_SWITCHOFF=0x0

###############################################################################
# Masking value of protocols_switch_off for NFA_EeSetDefaultProtoRouting()
# this value is used as masking value of protocols_switch_off, and it is not for DH ee_handle
# If the value is not set, masking value is 0xff
MASKING_PROTO_EE_SWITCHOFF=0xff
